'''
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

 

示例 1：

输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶
示例 2：

输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶
 

提示：

1 <= n <= 45
'''
class Solution:
    def climbStairs(self, n: int) -> int:
        """
        解题思路：
        设跳上 nnn 级台阶有 f(n)f(n)f(n) 种跳法。在所有跳法中，青蛙的最后一步只有两种情况： 跳上 1 级或 2 级台阶。
        当为 1 级台阶： 剩 n−1 个台阶，此情况共有 f(n−1) 种跳法。
        当为 2 级台阶： 剩 n−2个台阶，此情况共有 f(n−2) 种跳法。
        即 f(n) 为以上两种情况之和，即 f(n)=f(n−1)+f(n−2)，
        以上递推性质为斐波那契数列。因此，本题可转化为 求斐波那契数列的第 nnn 项，区别仅在于初始值不同：
        """
        f1, f2 = 1, 2
        for _ in range(n-1):
            f1, f2 = f2, f1+f2

        return f1

if __name__=="__main__":
    re = Solution().climbStairs(2)
    print(re)